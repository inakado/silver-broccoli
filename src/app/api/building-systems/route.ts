import { NextResponse } from "next/server";

export async function GET(req: Request) {
  const { searchParams } = new URL(req.url);
  const buildingId = searchParams.get("id")?.trim();

  if (!buildingId) {
    return NextResponse.json({ error: "ID –∑–¥–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω" }, { status: 400 });
  }

  try {
    console.log("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–¥–∞–Ω–∏—è ID:", buildingId);

    // 1Ô∏è‚É£ –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–¥–∞–Ω–∏–∏, –≤–∫–ª—é—á–∞—è —Å–∏—Å—Ç–µ–º—ã
    const buildingUrl = `${process.env.NEXT_PUBLIC_BASEROW_URL}/api/database/rows/table/${process.env.NEXT_PUBLIC_BASEROW_TABLE_BUILDINGS_ID}/${buildingId}/?user_field_names=true`;

    const buildingRes = await fetch(buildingUrl, {
      headers: { Authorization: `Token ${process.env.NEXT_PUBLIC_BASEROW_API_KEY}` },
    });

    if (!buildingRes.ok) {
      return NextResponse.json({ error: "–ó–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" }, { status: 404 });
    }

    const buildingData = await buildingRes.json();

    

    // 2Ô∏è‚É£ –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
    const systems = buildingData.Buildings_Systems?.map((system: any) => ({
      id: system.id,
      name: system.value,
    })) || [];

   

    return NextResponse.json({ systems });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:", error);
    return NextResponse.json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 });
  }
}