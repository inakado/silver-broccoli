import { NextResponse } from "next/server"

// ‚úÖ API-—Ä–æ—É—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É
export async function GET(req: Request) {
  const { searchParams } = new URL(req.url)
  const search = searchParams.get("search")?.toLowerCase() || ""

  try {
    // üìå –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    console.log("üîë BASEROW URL:", process.env.NEXT_PUBLIC_BASEROW_URL)
    console.log("üìä BASEROW TABLE:", process.env.NEXT_PUBLIC_BASEROW_TABLE_BUILDINGS_ID)
    console.log("üóùÔ∏è BASEROW API KEY:", process.env.NEXT_PUBLIC_BASEROW_API_KEY ? "OK" : "NOT SET")

    const apiUrl = `${process.env.NEXT_PUBLIC_BASEROW_URL}/api/database/rows/table/${process.env.NEXT_PUBLIC_BASEROW_TABLE_BUILDINGS_ID}/?user_field_names=true`
    
    // üìå –õ–æ–≥–∏—Ä—É–µ–º URL –∑–∞–ø—Ä–æ—Å–∞
    console.log("üöÄ Requesting Baserow:", apiUrl)

    const response = await fetch(apiUrl, {
      headers: {
        Authorization: `Token ${process.env.NEXT_PUBLIC_BASEROW_API_KEY}`,
      },
      next: { revalidate: 60 },
    })

    // üìå –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é
    const rawData = await response.json()
    console.log("üåê –û—Ç–≤–µ—Ç –æ—Ç Baserow:", rawData)

    if (!response.ok) {
      console.error("‚ùå –û—à–∏–±–∫–∞ Baserow:", rawData)
      return NextResponse.json({ error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Baserow: ${rawData.detail ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}` }, { status: response.status })
    }

    // ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∞–¥—Ä–µ—Å—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è (RegExp)
    const filteredBuildings = rawData.results
      .filter((row: any) => {
        const address = `${row.Street ?? ""} ${row.House_Number ?? ""}`.toLowerCase()

        // –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        const regex = new RegExp(search.replace(/\s+/g, ".*"), "i") // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä –∏ –ø—Ä–æ–±–µ–ª—ã

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        return regex.test(address)
      })
      .map((row: any) => ({
        id: row.id,
        address: `${row.Street}, ${row.House_Number}`,
      }))

    return NextResponse.json({
      buildings: filteredBuildings,
    })
  } catch (error) {
    console.error("üí• –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Baserow:", error)
    return NextResponse.json({ error: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ Baserow" }, { status: 500 })
  }
}